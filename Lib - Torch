## Torch

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.optim as optim

# 1. Carregar e normalizar o MNIST
transform = transforms.Compose([transforms.ToTensor(),transforms.Normalize((0.5,), (0.5,))])
trainset = torchvision.datasets.MNIST(root='./data',train=True, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset,batch_size=4, shuffle=True)

testset = torchvision.datasets.MNIST(root='./data',train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset,batch_size=4, shuffle=False)

# 2. Definir uma rede neural
class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    self.fc1 = nn.Linear(28 * 28, 64)
    self.fc2 = nn.Linear(64, 10)

  def forward(self, x):
    x = x.view(-1, 28 * 28)
    x = torch.relu(self.fc1(x))
    x = self.fc2(x)
    return x

net = Net()

# 3. Definir uma função de perda e um otimizador
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001,momentum=0.9)

# 4. Treinar a rede
for epoch in range(2): # loop over the dataset multiple times
  for i, data in enumerate(trainloader, 0):
    inputs, labels = data
    optimizer.zero_grad()
    outputs = net(inputs)
    loss = criterion(outputs, labels)
    loss.backward()
    optimizer.step()
  print('Finished Training')

# 5. Testar a rede nos dados de teste
correct = 0
total = 0
with torch.no_grad():
  for data in testloader:
    images, labels = data
    outputs = net(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (100 * correct / total))
