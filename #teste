#Test


#Exercicio  71 
#Implemente um algoritmo, em Python, de Aprendizado de Máquina para
#rastreamento de objeto, com análise do movimento em um vídeo, aplicando o
#conceito de fluxo óptico esparso.



import cv2
import numpy as np

# Captura de vídeo
video_path = "D:/Dados/Material_complementar_rastreamento_objetos/videos/walking.avi"
cap = cv2.VideoCapture(video_path)

# Inicialização do rastreador de fluxo óptico
lk_params = dict(winSize=(15, 15),
                 maxLevel=2,
                 criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

# Cores para desenhar os vetores de fluxo óptico
color = np.random.randint(0, 255, (100, 3))

# Captura o primeiro quadro
ret, old_frame = cap.read()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Detecta características no primeiro quadro
p0 = cv2.goodFeaturesToTrack(old_gray, mask=None, maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)

# Cria uma máscara para desenhar os vetores de fluxo óptico
mask = np.zeros_like(old_frame)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


  
    # Calcula o fluxo óptico
    p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)

    # Seleciona os pontos válidos (st = 1)
    good_new = p1[st == 1]
    good_old = p0[st == 1]

    # Desenha as trilhas dos pontos de interesse
    for i, (new, old) in enumerate(zip(good_new, good_old)):
        a, b = new.ravel()
        c, d = old.ravel()
        mask = cv2.line(mask, (a, b), (c, d), color[i].tolist(), 2)
        frame = cv2.circle(frame, (a, b), 5, color[i].tolist(), -1)
    
    # Combina a máscara com o quadro original
    img = cv2.add(frame, mask)

    # Exibe o resultado
    cv2.imshow('Fluxo Óptico Esparsa', img)
    
    # Atualiza os pontos de interesse
    p0 = good_new.reshape(-1, 1, 2)

    # Sai do loop se a tecla 'q' for pressionada
    if cv2.waitKey(30) & 0xFF == ord('q'):
        break

# Libera os recursos
cap.release()
cv2.destroyAllWindows()
